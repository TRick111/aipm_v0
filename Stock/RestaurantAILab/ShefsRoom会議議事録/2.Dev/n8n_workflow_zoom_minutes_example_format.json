{
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "zoom-transcription",
        "authentication": "basicAuth",
        "responseMode": "responseNode",
        "options": {
          "rawBody": true
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        0,
        0
      ],
      "id": "a1a1b111-1111-4111-9111-111111111111",
      "name": "Webhook",
      "webhookId": "zoom-transcription-endpoint"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "12c89807-6e71-45c3-82f4-4f028389bf33",
              "leftValue": "={{ $json.body.event }}",
              "rightValue": "endpoint.url_validation",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        200,
        0
      ],
      "id": "b2b2c222-2222-4222-9222-222222222222",
      "name": "If url_validation"
    },
    {
      "parameters": {
        "action": "hmac",
        "type": "SHA256",
        "value": "={{ $json.body.payload.plainToken }}",
        "dataPropertyName": "encryptedToken",
        "secret": "={{ $env.ZOOM_WEBHOOK_SECRET }}"
      },
      "type": "n8n-nodes-base.crypto",
      "typeVersion": 1,
      "position": [
        420,
        -130
      ],
      "id": "c3c3d333-3333-4333-9333-333333333333",
      "name": "Crypto"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"plainToken\": \"{{$json.body.payload.plainToken}}\",\n  \"encryptedToken\": \"{{$json.encryptedToken}}\"\n}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        600,
        -130
      ],
      "id": "d4d4e444-4444-4444-9444-444444444444",
      "name": "Respond to Webhook (Validation)"
    },
    {
      "parameters": {
        "functionCode": "// Extract transcript URL and meeting meta from Zoom webhook\nconst body = items[0].json.body ?? items[0].json;\nconst payload = body?.payload ?? body;\nconst obj = payload?.object ?? payload;\n// try common properties for transcript URL\nconst url = obj?.download_url || obj?.transcript_file_url || body?.download_url || body?.transcript_file_url || null;\nconst meeting = { id: obj?.id ?? null, uuid: obj?.uuid ?? null, topic: obj?.topic ?? '', start_time: obj?.start_time ?? '', timezone: obj?.timezone ?? '' };\nreturn [{ json: { transcriptUrl: url, meeting } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        420,
        100
      ],
      "id": "e5e5f555-5555-4555-9555-555555555555",
      "name": "Function: Extract Transcript URL"
    },
    {
      "parameters": {
        "url": "={{$json.transcriptUrl}}",
        "responseFormat": "string",
        "dataPropertyName": "vttRaw",
        "options": {
          "headerParametersUi": {
            "parameter": [
              {
                "name": "Accept",
                "value": "text/vtt,*/*"
              },
              {
                "name": "Authorization",
                "value": "Basic {{$env.ZOOM_BASIC_B64}}"
              }
            ]
          }
        }
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 5,
      "position": [
        640,
        100
      ],
      "id": "f6f60666-6666-4666-9666-666666666666",
      "name": "HTTP: Download VTT"
    },
    {
      "parameters": {
        "functionCode": "function stripVtt(vttText) {\n  const lf = (vttText || '').replace(/\\r/g, '');\n  const lines = lf.split('\\n');\n  const ts = /^\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}\\\\s-->\\\\s\\\\d{2}:\\\\d{2}:\\\\d{2}\\\\.\\\\d{3}(?:.*)?$/;\n  const out = [];\n  for (const raw of lines) {\n    const s = raw.trim();\n    if (!s) continue;\n    if (s === 'WEBVTT') continue;\n    if (/^\\\\d+$/.test(s)) continue;\n    if (ts.test(s)) continue;\n    out.push(s);\n  }\n  return out.join('\\n');\n}\nconst vttText = $json.vttRaw ?? $json.data ?? $json.body ?? '';\nconst cleanedTranscript = stripVtt(vttText);\nreturn [{ json: { ...$json, cleanedTranscript } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        860,
        100
      ],
      "id": "a7a70777-7777-4777-9777-777777777777",
      "name": "Function: Strip VTT"
    },
    {
      "parameters": {
        "functionCode": "function mergeSameSpeaker(inputText) {\n  const lines = (inputText || '').split('\\n');\n  const endPunct = /[。．.!?！？]$/;\n  const startPunct = /^[、。．,!?！？]/;\n  let lastSpeaker = '';\n  let buffer = '';\n  const out = [];\n  const flush = () => { if (buffer) { out.push(lastSpeaker + ': ' + buffer); buffer=''; lastSpeaker=''; } };\n  for (const line of lines) {\n    const idxHalf = line.indexOf(':');\n    const idxFull = line.indexOf('：');\n    let idx = -1;\n    if (idxHalf === -1) idx = idxFull; else if (idxFull === -1) idx = idxHalf; else idx = Math.min(idxHalf, idxFull);\n    if (idx > -1) {\n      const speaker = line.slice(0, idx).trim();\n      const text = line.slice(idx + 1).replace(/^\\\\s+/, '');\n      if (!lastSpeaker || lastSpeaker === speaker) {\n        if (!buffer) { lastSpeaker = speaker; buffer = text; }\n        else { const sep = (endPunct.test(buffer) || startPunct.test(text)) ? '' : ' '; buffer = buffer + sep + text; }\n      } else {\n        flush(); lastSpeaker = speaker; buffer = text;\n      }\n    } else {\n      flush(); out.push(line);\n    }\n  }\n  flush();\n  return out.join('\\n');\n}\nconst mergedTranscript = mergeSameSpeaker($json.cleanedTranscript || '');\nreturn [{ json: { ...$json, mergedTranscript } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1080,
        100
      ],
      "id": "b8b80888-8888-4888-9888-888888888888",
      "name": "Function: Merge Same Speaker"
    },
    {
      "parameters": {
        "functionCode": "function yyyymmdd(d) { return d.toISOString().slice(0,10).replace(/-/g, ''); }\nconst dtStr = $json.meeting?.start_time || new Date().toISOString();\nconst dateOnly = (dtStr || '').slice(0,10);\nconst ymd = dateOnly ? dateOnly.replace(/-/g,'') : yyyymmdd(new Date());\nconst client = 'UnknownClient';\nreturn [{ json: { ...$json, metaDocTitle: '[Meta] ' + ymd + ' ' + client, summaryDocTitle: '[Minutes] ' + ymd + ' ' + client, transcriptDocTitle: '[Transcript] ' + ymd + ' ' + client } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1300,
        -20
      ],
      "id": "c9c90999-9999-4999-9999-999999999999",
      "name": "Function: Prepare Titles"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent",
        "jsonParameters": true,
        "sendBody": true,
        "options": {
          "headerParametersUi": {
            "parameter": [
              { "name": "x-goog-api-key", "value": "={{$env.GEMINI_API_KEY}}" },
              { "name": "Content-Type", "value": "application/json" }
            ]
          }
        },
        "bodyParametersJson": "={ \n  \"contents\": [ { \"role\": \"user\", \"parts\": [ { \"text\": \"出力フォーマット:\\\n# 会議メタ情報\\n- ミーティング日時: <日時(可能ならタイムゾーン含む)>\\n- クライアント名: <企業名/不明>\\n- 参加者:\\n  - <氏名>\\n  - <氏名>\\n\\n次のトランスクリプトから必要情報を抽出してください。\\n\\n===== TRANSCRIPT START =====\\n\" + $json.mergedTranscript + \"\\n===== TRANSCRIPT END =====\" } ] } ]\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 5,
      "position": [
        1520,
        -20
      ],
      "id": "dadada00-0000-4000-a000-000000000000",
      "name": "HTTP: Gemini (Meta)"
    },
    {
      "parameters": {
        "functionCode": "let text = '';\nconst cands = $json.candidates;\nif (Array.isArray(cands) && cands[0]?.content?.parts?.[0]?.text) { text = cands[0].content.parts[0].text; }\nelse if ($json?.content?.parts?.[0]?.text) { text = $json.content.parts[0].text; }\nreturn [{ json: { ...$json, metaText: text } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1740,
        -20
      ],
      "id": "ededed11-1111-4111-b111-111111111112",
      "name": "Function: Parse Gemini (Meta)"
    },
    {
      "parameters": {
        "folderId": "={{$env.GOOGLE_DRIVE_FOLDER_ID || ''}}",
        "title": "={{$json.metaDocTitle}}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        1960,
        -20
      ],
      "id": "fefefe22-2222-4222-b222-222222222223",
      "name": "Create Meta Document"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "=https://docs.googleapis.com/v1/documents/{{$node[\"Create Meta Document\"].json.documentId}}:batchUpdate",
        "jsonParameters": true,
        "sendBody": true,
        "options": {
          "headerParametersUi": {
            "parameter": [
              { "name": "Authorization", "value": "Bearer {{$env.GOOGLE_DOCS_TOKEN}}" },
              { "name": "Content-Type", "value": "application/json" }
            ]
          }
        },
        "bodyParametersJson": "={ \n  \"requests\": [ { \n    \"insertText\": { \n      \"text\": \"\" + $node[\\\"Function: Parse Gemini (Meta)\\\"].json.metaText + \"\", \n      \"location\": { \"index\": 1 } \n    } \n  } ] \n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 5,
      "position": [
        2180,
        -20
      ],
      "id": "ababab33-3333-4333-b333-333333333334",
      "name": "HTTP: Docs Insert (Meta)"
    },
    {
      "parameters": {
        "functionCode": "const basePrompt = `このミーティングは飲食コンサルタント「竹矢 匠吾」とクライアントの「べこやはは丸」の道上さんとの会話トランスクリプトです。音声認識の誤変換や聞き取りミスが含まれる可能性があるため、文脈・前後関係から意味を補完して正確に理解してください。\n\n出力方針（厳守）\n- 主語を必ず明示する。クライアント企業は初出で正式名称を用い（〇〇株式会社など）、以降は略記可。コンサル側は「竹矢」と明記。\n- 関連する議題ごとにサブタイトルをつけ、箇条書きじゃない文章で記載する。\n- 誤変換は文脈から推測して修正。特定不能な固有名詞は「不明」と明記。\n- 雑談・挨拶は省略。会議の実務内容のみ記載。\n- 担当者は役割から推測し「（推測：◯◯側）」を併記。確信がない事実は「不明」と明記。\n- 今後のアクションアイテム」はテーブル形式で記載。\n- 議事録の中で内容が不明な点があれば最後にまとめて読み取れなかった点を記載する\n\n出力フォーマット（Markdown）\n\n## クライアントから聞いた内容\nクライアントの（事実/要望/現状/課題）をテーマごとに記載。  \n\n## クライアントに伝えた内容\n竹矢が説明・提案・助言・報告した内容をテーマごとに記載。  \n\n## ミーティング内で決定したこと\n合意事項・採用が確定した方針をテーマごとに記載。  \n\n## 今後のアクションアイテムと担当者\nタスク内容 — 担当者（確定または推測） — 期限（あれば記載。なければ特に何も記載しない）  \n（同様に続ける）\n\n手順\n1) トランスクリプト全体を通読し、文脈優先で解釈する。  \n2) 誤聴・誤変換は推測修正し、修正不能は「不明」と明記。  \n3) 役割に応じて担当者を割り当てる（店舗作業＝飲食店側、分析・提案＝コンサル側）。  \n4) すべての文で主語を明示しする。  \n5) 「今後のアクションアイテム」はテーブル形式で「タスク — 担当者 — 期限（明確になければ省略）」で統一する。\n\n注意事項\n- 主観的推測は禁止（担当者推測は可とし、必ず「（推測：◯◯側）」を明記）。  \n- 事実不確定は「不明」と明記。  \n- 数値・日付は可能な範囲で具体化。不確定は「目安」「未確定」とする。`;\nconst transcript = $node[\"Function: Merge Same Speaker\"].json.mergedTranscript || '';\nconst summaryPrompt = `${basePrompt}\n\n===== TRANSCRIPT START =====\n${transcript}\n===== TRANSCRIPT END =====`;\nreturn [{ json: { ...$json, summaryPrompt } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1300,
        220
      ],
      "id": "cdcdcd44-4444-4444-b444-444444444445",
      "name": "Function: Build Summary Prompt"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "=https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-pro:generateContent",
        "jsonParameters": true,
        "sendBody": true,
        "options": {
          "headerParametersUi": {
            "parameter": [
              { "name": "x-goog-api-key", "value": "={{$env.GEMINI_API_KEY}}" },
              { "name": "Content-Type", "value": "application/json" }
            ]
          }
        },
        "bodyParametersJson": "={ \n  \"contents\": [ { \"role\": \"user\", \"parts\": [ { \"text\": \"\" + $node[\\\"Function: Build Summary Prompt\\\"].json.summaryPrompt + \"\" } ] } ]\n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 5,
      "position": [
        1520,
        220
      ],
      "id": "dfdfdf55-5555-4555-b555-555555555556",
      "name": "HTTP: Gemini (Summary)"
    },
    {
      "parameters": {
        "functionCode": "let text = '';\nconst cands = $json.candidates;\nif (Array.isArray(cands) && cands[0]?.content?.parts?.[0]?.text) { text = cands[0].content.parts[0].text; }\nelse if ($json?.content?.parts?.[0]?.text) { text = $json.content.parts[0].text; }\nreturn [{ json: { ...$json, summaryText: text } }];"
      },
      "type": "n8n-nodes-base.function",
      "typeVersion": 2,
      "position": [
        1740,
        220
      ],
      "id": "e0e0e066-6666-4666-b666-666666666667",
      "name": "Function: Parse Gemini"
    },
    {
      "parameters": {
        "folderId": "={{$env.GOOGLE_DRIVE_FOLDER_ID || ''}}",
        "title": "={{$json.summaryDocTitle}}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        1960,
        220
      ],
      "id": "e1e1e177-7777-4777-b777-777777777778",
      "name": "Create Summary Document"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "=https://docs.googleapis.com/v1/documents/{{$node[\"Create Summary Document\"].json.documentId}}:batchUpdate",
        "jsonParameters": true,
        "sendBody": true,
        "options": {
          "headerParametersUi": {
            "parameter": [
              { "name": "Authorization", "value": "Bearer {{$env.GOOGLE_DOCS_TOKEN}}" },
              { "name": "Content-Type", "value": "application/json" }
            ]
          }
        },
        "bodyParametersJson": "={ \n  \"requests\": [ { \n    \"insertText\": { \n      \"text\": \"\" + $node[\\\"Function: Parse Gemini\\\"].json.summaryText + \"\", \n      \"location\": { \"index\": 1 } \n    } \n  } ] \n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 5,
      "position": [
        2180,
        220
      ],
      "id": "e2e2e288-8888-4888-b888-888888888889",
      "name": "HTTP: Docs Insert (Summary)"
    },
    {
      "parameters": {
        "folderId": "={{$env.GOOGLE_DRIVE_FOLDER_ID || ''}}",
        "title": "={{$json.transcriptDocTitle}}"
      },
      "type": "n8n-nodes-base.googleDocs",
      "typeVersion": 2,
      "position": [
        1960,
        360
      ],
      "id": "e3e3e399-9999-4999-b999-999999999990",
      "name": "Create Transcript Document"
    },
    {
      "parameters": {
        "httpMethod": "POST",
        "url": "=https://docs.googleapis.com/v1/documents/{{$node[\"Create Transcript Document\"].json.documentId}}:batchUpdate",
        "jsonParameters": true,
        "sendBody": true,
        "options": {
          "headerParametersUi": {
            "parameter": [
              { "name": "Authorization", "value": "Bearer {{$env.GOOGLE_DOCS_TOKEN}}" },
              { "name": "Content-Type", "value": "application/json" }
            ]
          }
        },
        "bodyParametersJson": "={ \n  \"requests\": [ { \n    \"insertText\": { \n      \"text\": \"\" + $node[\\\"Function: Merge Same Speaker\\\"].json.mergedTranscript + \"\", \n      \"location\": { \"index\": 1 } \n    } \n  } ] \n}"
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 5,
      "position": [
        2180,
        360
      ],
      "id": "e4e4e4aa-aaaa-4aaa-baaa-aaaaaaaaaaa1",
      "name": "HTTP: Docs Insert (Transcript)"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"status\": \"ok\",\n  \"metaDocId\": \"{{$node[\\\"Create Meta Document\\\"].json.documentId}}\",\n  \"summaryDocId\": \"{{$node[\\\"Create Summary Document\\\"].json.documentId}}\",\n  \"transcriptDocId\": \"{{$node[\\\"Create Transcript Document\\\"].json.documentId}}\"\n}",
        "options": {
          "responseCode": 200
        }
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.4,
      "position": [
        2400,
        360
      ],
      "id": "e5e5e5bb-bbbb-4bbb-bbbb-bbbbbbbbbbb2",
      "name": "Respond to Webhook (Success)"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "If url_validation",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If url_validation": {
      "main": [
        [
          {
            "node": "Crypto",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Function: Extract Transcript URL",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Crypto": {
      "main": [
        [
          {
            "node": "Respond to Webhook (Validation)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Extract Transcript URL": {
      "main": [
        [
          {
            "node": "HTTP: Download VTT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Download VTT": {
      "main": [
        [
          {
            "node": "Function: Strip VTT",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Strip VTT": {
      "main": [
        [
          {
            "node": "Function: Merge Same Speaker",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Merge Same Speaker": {
      "main": [
        [
          {
            "node": "Function: Prepare Titles",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Function: Build Summary Prompt",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Prepare Titles": {
      "main": [
        [
          {
            "node": "HTTP: Gemini (Meta)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Gemini (Meta)": {
      "main": [
        [
          {
            "node": "Function: Parse Gemini (Meta)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Parse Gemini (Meta)": {
      "main": [
        [
          {
            "node": "Create Meta Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Meta Document": {
      "main": [
        [
          {
            "node": "HTTP: Docs Insert (Meta)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Build Summary Prompt": {
      "main": [
        [
          {
            "node": "HTTP: Gemini (Summary)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Gemini (Summary)": {
      "main": [
        [
          {
            "node": "Function: Parse Gemini",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Create Summary Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Function: Parse Gemini": {
      "main": [
        [
          {
            "node": "Create Summary Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Summary Document": {
      "main": [
        [
          {
            "node": "HTTP: Docs Insert (Summary)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Create Transcript Document": {
      "main": [
        [
          {
            "node": "HTTP: Docs Insert (Transcript)",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "Respond to Webhook (Success)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Docs Insert (Summary)": {
      "main": [
        [
          {
            "node": "Create Transcript Document",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP: Docs Insert (Transcript)": {
      "main": [
        [
          {
            "node": "Respond to Webhook (Success)",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "pinData": {},
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "0000000000000000000000000000000000000000000000000000000000000000"
  }
}


